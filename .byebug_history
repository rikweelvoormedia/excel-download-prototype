c
self.sort_on_generate
!sort_state.sort_conditions.to_a.empty?
c
self.sort_on_generate
self.sort_on_generate = false
self.sort_on_generate
c
self.sort_state.sort_conditions
self.range
self.sort_state.defined_name
self.sort_state.range
self.sort_state
c
sort_state.range
sort_state
c
ref
c
first_column = first_column[/[A-Z]+/]
first_column = "B2"
first_column
@col_id
ref
ref_from_col_id(ref, @col_id)
ref
c
ref_from_col_id(ref, @col_id)
ref
c
sort_conditions[0].descending
sort_conditions[0]
sort_conditions
c
ref
c
first_cell
ref
start_point = Axlsx::name_to_indices(first_cell)
      end_point = Axlsx::name_to_indices(last_cell)
first_cell, last_cell = ref.split(':')
first_cell, last_cell = range.split(':')
ref
c
sort_conditions.last
c
sort_conditions.last.descending
sort_conditions.last.to_a
sort_conditions.last
c
cc
c
auto_filter.sort_state.sort_conditions.to_a
c
auto_filter.sort_state.sort_conditions.to_a
c
auto_filter.sort_state.sort_conditions.to_a
c
auto_filter.sort_state.sort_conditions.to_a
auto_filter.sort_state.sort_conditions
c
sort_array
c
 auto_filter.sort_state.sort_conditions.to_a.first.col_id
 auto_filter.sort_state.sort_conditions.to_a.first
 auto_filter.sort_state.sort_conditions.to_a
c
sort_conditions.first.col_id
c
row
c
auto_filter.sort_state.sort_conditions.to_a.first.col_id
auto_filter.sort_state.sort_conditions.to_a
c
self
self.sort_conditions_array
c
sort_conditions_array
c
sort_conditions_array
c
sort_conditions_array
c
sort_conditions_array
c
@worksheet
@worksheet.auto_filter.defined_name
@worksheet.auto_filter
@worksheet
workbook
quit
√çœ
qqq
c
sort_conditions_array
@sort_conditions_array
c
sort_conditions_array
@sort_conditions_array
c
@sort_conditions_array
c
@sort_conditions_array
c
@sort_conditions_array
@sort_conditions
c
self
worksheet.auto_filter.sort_state.apply
worksheet.auto_filter.sort_state
worksheet
worksheet.rows[3].cells[2].value
worksheet.rows[2].cells[2].value
worksheet.rows[1].cells[2].value
self.sort_state.apply
rows = worksheet.rows[(start_point.last + 1)..end_point.last] || []
worksheet.rows[2].cells[2].value
worksheet.rows[1].cells[2].value
sort_state.apply
worksheet.rows[3].cells[2].value
worksheet.rows[2].cells[2].value
worksheet.rows[1].cells[2].value
c
worksheet.rows[3].cells[2].value
worksheet.rows[2].cells[2].value
worksheet.rows[1].cells[2].value
@sort_state.apply
worksheet.rows[3].cells[2].value
worksheet.rows[2].cells[2].value
worksheet.rows[1].cells[2].value
self.sort_state.apply
worksheet.rows[3].cells[2].value
worksheet.rows[2].cells[2].value
worksheet.rows[1].cells[2].value
sort_state.apply
worksheet.rows[3].cells[2].value
worksheet.rows[2].cells[2].value
worksheet.rows[1].cells[2].value
worksheet
rows[1].cells[2].value
sarah
sort_state
c
sorted_rows[2].cells[2].value
sorted_rows[1].cells[2].value
rows[1].cells[2].value
sorted_rows[0].cells[2].value
rows[0].cells[2].value
sorted_rows = rows.sort_by { |row| row.cells[2].value }
rows[2].cells[2].value
rows[1].cells[2].value
rows.sort_by { |row| row.cells[2].value }
c
rows
c
rows.cells[2].values
rows[1].cells[1].value
rows[1].cells[0]
rows[1].cells.all
rows[1].cells[1].value
rows[1].cells[0].value
rows[0].cells[0].value
rows.pre
rows.select{"Sleek Copper Car"}
rows.select{value: "Sleek Copper Car"}
rows.select(value: "Sleek Copper Car")
rows.take(36)
rows.take(32)
rows.take(31)
rows.take(0)
rows.take(1)
rows.take(value: "Sleek Copper Car")
rows.take("Sleek Copper Car")
rows.sort
@rows
rows.@rows
rows.find("Sleek Copper Car")
rows.where(value: 83.1)
rows.where(name: "Sleek Copper Car")
rows.where("Sleek Copper Car")
rows.count
rows.first
row
rows[0][0]
rows[0]
rows.defined_enums
rows.typeof
type(rows)
rows.type_of
rows.first
rows.type
rows
